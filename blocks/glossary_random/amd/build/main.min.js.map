{"version":3,"sources":["../src/main.js"],"names":["selectors","glossaryEntry","refreshButton","renderEntry","entry","Templates","renderForPromise","reloadContent","root","content","querySelector","instanceId","dataset","blockinstanceid","then","data","html","js","replaceNodeContents","catch","displayException","initEventListeners","addEventListener","e","target","closest","preventDefault","init","rootSelector","document","timerInterval","parseInt","reloadtime","setInterval"],"mappings":"mMA0BA,uD,GAGMA,CAAAA,CAAS,CAAG,CACdC,aAAa,CAAE,+CADD,CAEdC,aAAa,CAAE,kCAFD,C,CAYZC,CAAW,CAAG,SAAAC,CAAK,QAAIC,WAAUC,gBAAV,CAA2B,4BAA3B,CAAyDF,CAAzD,CAAJ,C,CASnBG,CAAa,CAAG,SAASC,CAAT,CAAe,IAC3BC,CAAAA,CAAO,CAAGD,CAAI,CAACE,aAAL,CAAmBV,CAAS,CAACC,aAA7B,CADiB,CAG3BU,CAAU,CAAGH,CAAI,CAACI,OAAL,CAAaC,eAAb,EAAgC,IAHlB,CAIjC,MAAO,eAASF,CAAT,EACFG,IADE,CACG,SAAAV,CAAK,QAAID,CAAAA,CAAW,CAACC,CAAK,CAACW,IAAP,CAAf,CADR,EAEFD,IAFE,CAEG,eAAEE,CAAAA,CAAF,GAAEA,IAAF,CAAQC,CAAR,GAAQA,EAAR,OAAgBZ,WAAUa,mBAAV,CAA8BT,CAA9B,CAAuCO,CAAvC,CAA6CC,CAA7C,CAAhB,CAFH,EAGFE,KAHE,CAGIC,WAHJ,CAIV,C,CAOKC,CAAkB,CAAG,SAAAb,CAAI,CAAI,CAC/BA,CAAI,CAACc,gBAAL,CAAsB,OAAtB,CAA+B,SAAAC,CAAC,CAAI,CAChC,GAAIA,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBzB,CAAS,CAACE,aAA3B,CAAJ,CAA+C,CAC3CqB,CAAC,CAACG,cAAF,GACAnB,CAAa,CAACC,CAAD,CAChB,CACJ,CALD,CAMH,C,QAOmB,QAAPmB,CAAAA,IAAO,CAAAC,CAAY,CAAI,CAChC,GAAMpB,CAAAA,CAAI,CAAGqB,QAAQ,CAACnB,aAAT,CAAuBkB,CAAvB,CAAb,CAGAP,CAAkB,CAACb,CAAD,CAAlB,CAEA,GAAMsB,CAAAA,CAAa,CAAGC,QAAQ,CAACvB,CAAI,CAACI,OAAL,CAAaoB,UAAd,CAA9B,CACA,GAAIF,CAAJ,CAAmB,CAEfG,WAAW,CAAC,iBAAM1B,CAAAA,CAAa,CAACC,CAAD,CAAnB,CAAD,CAA4BsB,CAA5B,CACd,CACJ,C","sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the Recently accessed items block.\n *\n * @module     block_glossary_random/main\n * @package    block_glossary_random\n * @copyright  2020 Adrian Perez, Fernfachhochschule Schweiz (FFHS) <adrian.perez@ffhs.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getEntry} from './repository';\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\n\nconst selectors = {\n    glossaryEntry: '[data-region=\"randomglossaryentry-content\"]',\n    refreshButton: '[id=\"refresh_glossary_button\"]',\n};\n\n/**\n * Render the block content.\n *\n * @method renderEntry\n * @param {array} entry array containing entry of glossary item.\n * @return {Promise} Resolved with HTML and JS strings\n */\nconst renderEntry = entry => Templates.renderForPromise('block_glossary_random/view', entry);\n\n/**\n * Reloads the content of the block.\n *\n * @method reloadContent\n * @param {DOMElement} root object of the element to be replaced\n * @returns {Promise}\n */\nconst reloadContent = function(root) {\n    const content = root.querySelector(selectors.glossaryEntry);\n\n    const instanceId = root.dataset.blockinstanceid || null;\n    return getEntry(instanceId)\n        .then(entry => renderEntry(entry.data))\n        .then(({html, js}) => Templates.replaceNodeContents(content, html, js))\n        .catch(displayException);\n};\n\n/**\n * Event listener for the refresh button.\n *\n * @param {object} root The root element for the overview block\n */\nconst initEventListeners = root => {\n    root.addEventListener('click', e => {\n        if (e.target.closest(selectors.refreshButton)) {\n            e.preventDefault();\n            reloadContent(root);\n        }\n    });\n};\n\n/**\n * Get and show the glossary entry into the block.\n *\n * @param {String} rootSelector A reference to locate the root element.\n */\nexport const init = rootSelector => {\n    const root = document.querySelector(rootSelector);\n\n    // Init event click listener.\n    initEventListeners(root);\n\n    const timerInterval = parseInt(root.dataset.reloadtime);\n    if (timerInterval) {\n        // Start the periodic interval timer.\n        setInterval(() => reloadContent(root), timerInterval);\n    }\n};\n"],"file":"main.min.js"}