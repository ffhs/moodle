{"version":3,"sources":["../src/main.js"],"names":["define","Repository","Templates","getEntry","blockinstanceid","renderEntry","entry","renderForPromise","reloadContent","root","content","querySelector","instanceId","dataset","then","data","html","js","replaceNodeContents","catch","Notification","exception","refreshButton","addEventListener","e","target","closest","preventDefault","init","rootSelector","document","timerInterval","parseInt","reloadtime","setInterval"],"mappings":"AAyBAA,OAAM,8BACF,CACI,kCADJ,CAEI,gBAFJ,CADE,CAKF,SACIC,CADJ,CAEIC,CAFJ,CAGE,IAWMC,CAAAA,CAAQ,CAAG,SAASC,CAAT,CAA0B,CACrC,MAAOH,CAAAA,CAAU,CAACE,QAAX,CAAoBC,CAApB,CACV,CAbH,CAsBMC,CAAW,CAAG,SAASC,CAAT,CAAgB,CAC9B,MAAOJ,CAAAA,CAAS,CAACK,gBAAV,CAA2B,4BAA3B,CAAyDD,CAAzD,CACV,CAxBH,CAiCME,CAAa,CAAG,SAASC,CAAT,CAAe,IAC3BC,CAAAA,CAAO,CAAGD,CAAI,CAACE,aAAL,iDADiB,CAG3BC,CAAU,CAAGH,CAAI,CAACI,OAAL,CAAaT,eAAb,EAAgC,IAHlB,CAI/B,MAAOD,CAAAA,CAAQ,CAACS,CAAD,CAAR,CACFE,IADE,CACG,SAAAR,CAAK,QAAID,CAAAA,CAAW,CAACC,CAAK,CAACS,IAAP,CAAf,CADR,EAEFD,IAFE,CAEG,eAAEE,CAAAA,CAAF,GAAEA,IAAF,CAAQC,CAAR,GAAQA,EAAR,OAAgBf,CAAAA,CAAS,CAACgB,mBAAV,CAA8BR,CAA9B,CAAuCM,CAAvC,CAA6CC,CAA7C,CAAhB,CAFH,EAGFE,KAHE,CAGIC,YAAY,CAACC,SAHjB,CAIV,CAzCH,CAgDMC,CAAa,CAAG,SAASb,CAAT,CAAe,CAC/BA,CAAI,CAACc,gBAAL,CAAsB,OAAtB,CAA+B,SAAAC,CAAC,CAAI,CAChC,GAAIA,CAAC,CAACC,MAAF,CAASC,OAAT,CAhDQ,kCAgDR,CAAJ,CAAqC,CACjCF,CAAC,CAACG,cAAF,GACAnB,CAAa,CAACC,CAAD,CAChB,CACJ,CALD,CAMH,CAvDH,CA2EE,MAAO,CACHmB,IAAI,CAdG,QAAPA,CAAAA,IAAO,CAASC,CAAT,CAAuB,CAC9B,GAAIpB,CAAAA,CAAI,CAAGqB,QAAQ,CAACnB,aAAT,CAAuBkB,CAAvB,CAAX,CAGAP,CAAa,CAACb,CAAD,CAAb,CAEA,GAAIsB,CAAAA,CAAa,CAAGC,QAAQ,CAACvB,CAAI,CAACI,OAAL,CAAaoB,UAAd,CAA5B,CACA,GAAIF,CAAJ,CAAmB,CAEfG,WAAW,CAAC,iBAAM1B,CAAAA,CAAa,CAACC,CAAD,CAAnB,CAAD,CAA4BsB,CAA5B,CACd,CACJ,CAEM,CAGV,CAtFC,CAAN","sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the Recently accessed items block.\n *\n * @module     block_glossary_random/main\n * @package    block_glossary_random\n * @copyright  2020 Adrian Perez, Fernfachhochschule Schweiz (FFHS) <adrian.perez@ffhs.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'block_glossary_random/repository',\n        'core/templates',\n    ],\n    function(\n        Repository,\n        Templates\n    ) {\n        var GLOSSARYENTRY = '[data-region=\"randomglossaryentry-content\"]';\n        var REFRESHBUTTON = '[id=\"refresh_glossary_button\"]';\n\n        /**\n         * Get entry from backend.\n         *\n         * @method getEntry\n         * @param {Number} blockinstanceid Glossary block instance id\n         * @return {promise} Resolved with an array of a entry\n         */\n        var getEntry = function(blockinstanceid) {\n            return Repository.getEntry(blockinstanceid);\n        };\n\n        /**\n         * Render the block content.\n         *\n         * @method renderEntry\n         * @param {array} entry array containing entry of glossary item.\n         * @return {Promise} Resolved with HTML and JS strings\n         */\n        var renderEntry = function(entry) {\n            return Templates.renderForPromise('block_glossary_random/view', entry);\n        };\n\n        /**\n         * Reloads the content of the block.\n         *\n         * @method reloadContent\n         * @param {DOMElement} root object of the element to be replaced\n         * @returns {Promise}\n         */\n        var reloadContent = function(root) {\n            var content = root.querySelector(GLOSSARYENTRY);\n\n            var instanceId = root.dataset.blockinstanceid || null;\n            return getEntry(instanceId)\n                .then(entry => renderEntry(entry.data))\n                .then(({html, js}) => Templates.replaceNodeContents(content, html, js))\n                .catch(Notification.exception);\n        };\n\n        /**\n         * Event listener for the refresh button.\n         *\n         * @param {object} root The root element for the overview block\n         */\n        var refreshButton = function(root) {\n            root.addEventListener('click', e => {\n                if (e.target.closest(REFRESHBUTTON)) {\n                    e.preventDefault();\n                    reloadContent(root);\n                }\n            });\n        };\n\n        /**\n         * Get and show the glossary entry into the block.\n         *\n         * @param {String} rootSelector A reference to locate the root element.\n         */\n        var init = function(rootSelector) {\n            var root = document.querySelector(rootSelector);\n\n            // Init event click listener.\n            refreshButton(root);\n\n            var timerInterval = parseInt(root.dataset.reloadtime);\n            if (timerInterval) {\n                // Start the periodic interval timer.\n                setInterval(() => reloadContent(root), timerInterval);\n            }\n        };\n\n        return {\n            init: init\n        };\n    });\n"],"file":"main.min.js"}