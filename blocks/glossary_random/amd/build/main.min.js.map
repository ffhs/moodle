{"version":3,"sources":["../src/main.js"],"names":["define","$","Repository","Templates","CustomEvents","content","timer","renderEntry","entry","render","reloadContent","showconcept","concept","definition","then","html","js","replaceNodeContents","refreshButton","root","events","activate","on","e","data","originalEvent","preventDefault","init","find","attr","setInterval"],"mappings":"AAyBAA,OAAM,8BACF,CACI,QADJ,CAEI,kCAFJ,CAGI,gBAHJ,CAII,gCAJJ,CADE,CAOF,SACIC,CADJ,CAEIC,CAFJ,CAGIC,CAHJ,CAIIC,CAJJ,CAKE,IAIMC,CAAAA,CAAO,CAAG,EAJhB,CAKMC,CAAK,CAAG,EALd,CA0BMC,CAAW,CAAG,SAASC,CAAT,CAAgB,CAC9B,MAAOL,CAAAA,CAAS,CAACM,MAAV,CAAiB,4BAAjB,CAA+CD,CAA/C,CACV,CA5BH,CAoCME,CAAa,CAAG,SAASL,CAAT,CAAkB,CAQlC,MAAOE,CAAAA,CAAW,CANN,CACRI,WAAW,CAAE,MADL,CAERC,OAAO,CAAE,MAFD,CAGRC,UAAU,CAAE,yFAHJ,CAMM,CAAX,CAAmBC,IAAnB,CAAwB,SAASC,CAAT,CAAeC,CAAf,CAAmB,CAC9C,MAAOb,CAAAA,CAAS,CAACc,mBAAV,CAA8BZ,CAA9B,CAAuCU,CAAvC,CAA6CC,CAA7C,CACV,CAFM,CAGV,CA/CH,CAsDME,CAAa,CAAG,SAASC,CAAT,CAAe,CAC/Bf,CAAY,CAACJ,MAAb,CAAoBmB,CAApB,CAA0B,CACtBf,CAAY,CAACgB,MAAb,CAAoBC,QADE,CAA1B,EAIAF,CAAI,CAACG,EAAL,CAAQlB,CAAY,CAACgB,MAAb,CAAoBC,QAA5B,CAzDgB,kCAyDhB,CAAqD,SAASE,CAAT,CAAYC,CAAZ,CAAkB,CACnEd,CAAa,CAACL,CAAD,CAAb,CACAmB,CAAI,CAACC,aAAL,CAAmBC,cAAnB,EACH,CAHD,CAIH,CA/DH,CAsEMC,CAAI,CAAG,SAASR,CAAT,CAAe,CACtBA,CAAI,CAAGlB,CAAC,CAACkB,CAAD,CAAR,CAEAd,CAAO,CAAGc,CAAI,CAACS,IAAL,iDAAV,CACAtB,CAAK,CAAGa,CAAI,CAACU,IAAL,CAAU,iBAAV,GAAgC,IAAxC,CACkBV,CAAI,CAACU,IAAL,CAAU,sBAAV,GAAqC,IAAvD,CAGAX,CAAa,CAACC,CAAD,CAAb,CAGA,GAAY,CAAR,CAAAb,CAAJ,CAAe,CACXwB,WAAW,CAAC,UAAM,CACdpB,CAAa,CAACL,CAAD,CAChB,CAFU,CAERC,CAFQ,CAGd,CACJ,CAtFH,CAwFE,MAAO,CACHqB,IAAI,CAAEA,CADH,CAGV,CAvGC,CAAN","sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the Recently accessed items block.\n *\n * @module     block_glossary_random/main\n * @package    block_glossary_random\n * @copyright  2020 Adrian Perez, Fernfachhochschule Schweiz (FFHS) <adrian.perez@ffhs.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'jquery',\n        'block_glossary_random/repository',\n        'core/templates',\n        'core/custom_interaction_events'\n    ],\n    function(\n        $,\n        Repository,\n        Templates,\n        CustomEvents\n    ) {\n        var GLOSSARYENTRY = '[data-region=\"randomglossaryentry-content\"]';\n        var REFRESHBUTTON = '[id=\"refresh_glossary_button\"]';\n\n        var content = '';\n        var timer = '';\n        var blockinstanceid = '';\n\n        /**\n         * Get entry from backend.\n         *\n         * @method getEntry\n         * @param {int} blockinstanceid Glossary block instance id\n         * @return {promise} Resolved with an array of a entry\n         */\n        var getEntry = function(blockinstanceid) {\n            return Repository.getEntry(blockinstanceid);\n        };\n\n        /**\n         * Render the block content.\n         *\n         * @method renderEntry\n         * @param {array} array containing entry of glossary item.\n         * @return {promise} Resolved with HTML and JS strings\n         */\n        var renderEntry = function(entry) {\n            return Templates.render('block_glossary_random/view', entry);\n        };\n\n        /**\n         * Relodas the content of the block.\n         *\n         * @method reloadContent\n         * @param {content} object of the element to be replaced\n         */\n        var reloadContent = function(content) {\n            // var entry = getEntry(blockinstanceid);\n            var entry = {\n                showconcept: 'true',\n                concept: 'Sara',\n                definition: '<div class=\"no-overflow\"><p dir=\"ltr\" style=\"text-align:left;\">The best</p></div>'\n            };\n\n            return renderEntry(entry).then(function(html, js) {\n                return Templates.replaceNodeContents(content, html, js);\n            });\n        };\n\n        /**\n         * Event listener for the refresh button.\n         *\n         * @param {object} root The root element for the overview block\n         */\n        var refreshButton = function(root) {\n            CustomEvents.define(root, [\n                CustomEvents.events.activate\n            ]);\n\n            root.on(CustomEvents.events.activate, REFRESHBUTTON, function(e, data) {\n                reloadContent(content);\n                data.originalEvent.preventDefault();\n            });\n        };\n\n        /**\n         * Get and show the glossary entry into the block.\n         *\n         * @param {object} root The root element for the items block.\n         */\n        var init = function(root) {\n            root = $(root);\n\n            content = root.find(GLOSSARYENTRY);\n            timer = root.attr('data-reloadtime') || null;\n            blockinstanceid = root.attr('data-blockinstanceid') || null;\n\n            // Init event click listener.\n            refreshButton(root);\n\n            // Run periodical timer if set.\n            if (timer > 0) {\n                setInterval(() => {\n                    reloadContent(content);\n                }, timer);\n            }\n        };\n\n        return {\n            init: init\n        };\n    });"],"file":"main.min.js"}