{"version":3,"sources":["../src/main.js"],"names":["define","$","Repository","Templates","CustomEvents","content","timer","blockinstanceid","getEntry","renderEntry","entry","render","reloadContent","then","data","html","js","replaceNodeContents","catch","Notification","exception","refreshButton","root","events","activate","on","e","originalEvent","preventDefault","init","find","attr","setInterval"],"mappings":"AAyBAA,OAAM,8BACF,CACI,QADJ,CAEI,kCAFJ,CAGI,gBAHJ,CAII,gCAJJ,CADE,CAOF,SACIC,CADJ,CAEIC,CAFJ,CAGIC,CAHJ,CAIIC,CAJJ,CAKE,IAIMC,CAAAA,CAAO,CAAG,EAJhB,CAKMC,CAAK,CAAG,EALd,CAMMC,CAAe,CAAG,EANxB,CAeMC,CAAQ,CAAG,SAASD,CAAT,CAA0B,CACrC,MAAOL,CAAAA,CAAU,CAACM,QAAX,CAAoBD,CAApB,CACV,CAjBH,CA0BME,CAAW,CAAG,SAASC,CAAT,CAAgB,CAC9B,MAAOP,CAAAA,CAAS,CAACQ,MAAV,CAAiB,4BAAjB,CAA+CD,CAA/C,CACV,CA5BH,CAoCME,CAAa,CAAG,SAASP,CAAT,CAAkB,CAClC,MAAOG,CAAAA,CAAQ,CAACD,CAAD,CAAR,CACFM,IADE,CACG,SAASH,CAAT,CAAgB,CAClB,MAAOD,CAAAA,CAAW,CAACC,CAAK,CAACI,IAAP,CACrB,CAHE,EAGAD,IAHA,CAGK,SAASE,CAAT,CAAeC,CAAf,CAAmB,CACvB,MAAOb,CAAAA,CAAS,CAACc,mBAAV,CAA8BZ,CAA9B,CAAuCU,CAAvC,CAA6CC,CAA7C,CACV,CALE,EAKAE,KALA,CAKMC,YAAY,CAACC,SALnB,CAOV,CA5CH,CAmDMC,CAAa,CAAG,SAASC,CAAT,CAAe,CAC/BlB,CAAY,CAACJ,MAAb,CAAoBsB,CAApB,CAA0B,CACtBlB,CAAY,CAACmB,MAAb,CAAoBC,QADE,CAA1B,EAIAF,CAAI,CAACG,EAAL,CAAQrB,CAAY,CAACmB,MAAb,CAAoBC,QAA5B,CAtDgB,kCAsDhB,CAAqD,SAASE,CAAT,CAAYZ,CAAZ,CAAkB,CACnEF,CAAa,CAACP,CAAD,CAAb,CACAS,CAAI,CAACa,aAAL,CAAmBC,cAAnB,EACH,CAHD,CAIH,CA5DH,CAmEMC,CAAI,CAAG,SAASP,CAAT,CAAe,CACtBA,CAAI,CAAGrB,CAAC,CAACqB,CAAD,CAAR,CAEAjB,CAAO,CAAGiB,CAAI,CAACQ,IAAL,iDAAV,CACAxB,CAAK,CAAGgB,CAAI,CAACS,IAAL,CAAU,iBAAV,GAAgC,IAAxC,CACAxB,CAAe,CAAGe,CAAI,CAACS,IAAL,CAAU,sBAAV,GAAqC,IAAvD,CAGAV,CAAa,CAACC,CAAD,CAAb,CAGA,GAAY,CAAR,CAAAhB,CAAJ,CAAe,CACX0B,WAAW,CAAC,UAAM,CACdpB,CAAa,CAACP,CAAD,CAChB,CAFU,CAERC,CAFQ,CAGd,CACJ,CAnFH,CAqFE,MAAO,CACHuB,IAAI,CAAEA,CADH,CAGV,CApGC,CAAN","sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the Recently accessed items block.\n *\n * @module     block_glossary_random/main\n * @package    block_glossary_random\n * @copyright  2020 Adrian Perez, Fernfachhochschule Schweiz (FFHS) <adrian.perez@ffhs.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'jquery',\n        'block_glossary_random/repository',\n        'core/templates',\n        'core/custom_interaction_events'\n    ],\n    function(\n        $,\n        Repository,\n        Templates,\n        CustomEvents\n    ) {\n        var GLOSSARYENTRY = '[data-region=\"randomglossaryentry-content\"]';\n        var REFRESHBUTTON = '[id=\"refresh_glossary_button\"]';\n\n        var content = '';\n        var timer = '';\n        var blockinstanceid = '';\n\n        /**\n         * Get entry from backend.\n         *\n         * @method getEntry\n         * @param {int} blockinstanceid Glossary block instance id\n         * @return {promise} Resolved with an array of a entry\n         */\n        var getEntry = function(blockinstanceid) {\n            return Repository.getEntry(blockinstanceid);\n        };\n\n        /**\n         * Render the block content.\n         *\n         * @method renderEntry\n         * @param {array} array containing entry of glossary item.\n         * @return {promise} Resolved with HTML and JS strings\n         */\n        var renderEntry = function(entry) {\n            return Templates.render('block_glossary_random/view', entry);\n        };\n\n        /**\n         * Relodas the content of the block.\n         *\n         * @method reloadContent\n         * @param {content} object of the element to be replaced\n         */\n        var reloadContent = function(content) {\n            return getEntry(blockinstanceid)\n                .then(function(entry) {\n                    return renderEntry(entry.data);\n                }).then(function(html, js) {\n                    return Templates.replaceNodeContents(content, html, js);\n                }).catch(Notification.exception);\n\n        };\n\n        /**\n         * Event listener for the refresh button.\n         *\n         * @param {object} root The root element for the overview block\n         */\n        var refreshButton = function(root) {\n            CustomEvents.define(root, [\n                CustomEvents.events.activate\n            ]);\n\n            root.on(CustomEvents.events.activate, REFRESHBUTTON, function(e, data) {\n                reloadContent(content);\n                data.originalEvent.preventDefault();\n            });\n        };\n\n        /**\n         * Get and show the glossary entry into the block.\n         *\n         * @param {object} root The root element for the items block.\n         */\n        var init = function(root) {\n            root = $(root);\n\n            content = root.find(GLOSSARYENTRY);\n            timer = root.attr('data-reloadtime') || null;\n            blockinstanceid = root.attr('data-blockinstanceid') || null;\n\n            // Init event click listener.\n            refreshButton(root);\n\n            // Run periodical timer if set.\n            if (timer > 0) {\n                setInterval(() => {\n                    reloadContent(content);\n                }, timer);\n            }\n        };\n\n        return {\n            init: init\n        };\n    });"],"file":"main.min.js"}